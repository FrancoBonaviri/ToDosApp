{"ast":null,"code":"import axios from 'axios';\nimport Swal from 'sweetalert2';\n\nclass ApiService {\n  constructor() {\n    this.getUsuarioById = async (id, token) => {\n      const res = await axios.get(this.URL + '/usuario/' + id, {\n        headers: {\n          'x-token': token\n        }\n      });\n\n      if (!res.data.ok) {\n        throw new Error(res.data.err);\n      }\n\n      return res;\n    };\n\n    this.login = async (Email, Password) => {\n      const res = await axios.post(this.URL + '/usuario/login', {\n        Email,\n        Password\n      });\n\n      if (!res.data.ok) {\n        throw new Error(res.data.err);\n      }\n\n      return res;\n    };\n\n    this.craeteUser = async (Email, Password, UserName, PasswordRepeat) => {\n      const res = await axios.post(this.URL + '/usuario', {\n        Email,\n        Password,\n        UserName,\n        PasswordRepeat\n      });\n\n      if (!res.data.ok) {\n        throw new Error(res.data.err);\n      }\n\n      return res;\n    };\n\n    this.obtenerToDos = async token => {\n      const res = await axios.get(this.URL + '/todos', {\n        headers: {\n          'x-token': token\n        }\n      });\n\n      if (!res.data.ok) {\n        throw new Error(res.data.err);\n      }\n\n      return res;\n    };\n\n    this.createTodo = async (token, Name, Description, LimitDate, Criticality) => {\n      const body = {\n        Name,\n        Description,\n        LimitDate,\n        Criticality\n      };\n      const res = await axios.post(this.URL + '/todos', body, {\n        headers: {\n          'x-token': token\n        }\n      });\n\n      if (!res.data.ok) {\n        throw new Error(res.data.err);\n      }\n\n      return res;\n    };\n\n    this.URL = 'http://localhost:4500';\n  }\n\n}\n\nexport const apiService = new ApiService();","map":{"version":3,"sources":["/home/franc/proyectos/ToDosApp/client/src/services/apiService.js"],"names":["axios","Swal","ApiService","constructor","getUsuarioById","id","token","res","get","URL","headers","data","ok","Error","err","login","Email","Password","post","craeteUser","UserName","PasswordRepeat","obtenerToDos","createTodo","Name","Description","LimitDate","Criticality","body","apiService"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,aAAjB;;AAGA,MAAMC,UAAN,CAAiB;AAEbC,EAAAA,WAAW,GAAG;AAAA,SAKdC,cALc,GAKG,OAAMC,EAAN,EAAUC,KAAV,KAAoB;AACjC,YAAMC,GAAG,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAU,KAAKC,GAAL,GAAW,WAAX,GAAyBJ,EAAnC,EAAuC;AAAEK,QAAAA,OAAO,EAAE;AAAE,qBAAWJ;AAAb;AAAX,OAAvC,CAAlB;;AACA,UAAI,CAACC,GAAG,CAACI,IAAJ,CAASC,EAAd,EAAmB;AACf,cAAM,IAAIC,KAAJ,CAAUN,GAAG,CAACI,IAAJ,CAASG,GAAnB,CAAN;AACH;;AACD,aAAOP,GAAP;AACH,KAXa;;AAAA,SAadQ,KAbc,GAaN,OAAOC,KAAP,EAAcC,QAAd,KAA4B;AAChC,YAAMV,GAAG,GAAG,MAAMP,KAAK,CAACkB,IAAN,CAAW,KAAKT,GAAL,GAAW,gBAAtB,EAAwC;AAACO,QAAAA,KAAD;AAAQC,QAAAA;AAAR,OAAxC,CAAlB;;AACA,UAAI,CAACV,GAAG,CAACI,IAAJ,CAASC,EAAd,EAAmB;AACf,cAAM,IAAIC,KAAJ,CAAUN,GAAG,CAACI,IAAJ,CAASG,GAAnB,CAAN;AACH;;AACD,aAAOP,GAAP;AACH,KAnBa;;AAAA,SAuBdY,UAvBc,GAuBD,OAAOH,KAAP,EAAcC,QAAd,EAAwBG,QAAxB,EAAkCC,cAAlC,KAAsD;AAC/D,YAAMd,GAAG,GAAG,MAAMP,KAAK,CAACkB,IAAN,CAAW,KAAKT,GAAL,GAAU,UAArB,EAAiC;AAACO,QAAAA,KAAD;AAAQC,QAAAA,QAAR;AAAkBG,QAAAA,QAAlB;AAA4BC,QAAAA;AAA5B,OAAjC,CAAlB;;AACA,UAAI,CAACd,GAAG,CAACI,IAAJ,CAASC,EAAd,EAAmB;AACf,cAAM,IAAIC,KAAJ,CAAUN,GAAG,CAACI,IAAJ,CAASG,GAAnB,CAAN;AACH;;AACD,aAAOP,GAAP;AACH,KA7Ba;;AAAA,SAgCde,YAhCc,GAgCC,MAAOhB,KAAP,IAAkB;AAC7B,YAAMC,GAAG,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAU,KAAKC,GAAL,GAAU,QAApB,EAA8B;AAAEC,QAAAA,OAAO,EAAE;AAAE,qBAAWJ;AAAb;AAAX,OAA9B,CAAlB;;AACA,UAAI,CAACC,GAAG,CAACI,IAAJ,CAASC,EAAd,EAAmB;AACf,cAAM,IAAIC,KAAJ,CAAUN,GAAG,CAACI,IAAJ,CAASG,GAAnB,CAAN;AACH;;AACD,aAAOP,GAAP;AACH,KAtCa;;AAAA,SAwCdgB,UAxCc,GAwCD,OAAQjB,KAAR,EAAekB,IAAf,EAAqBC,WAArB,EAAkCC,SAAlC,EAA6CC,WAA7C,KAA8D;AAEvE,YAAMC,IAAI,GAAG;AACTJ,QAAAA,IADS;AACHC,QAAAA,WADG;AACUC,QAAAA,SADV;AACqBC,QAAAA;AADrB,OAAb;AAIA,YAAMpB,GAAG,GAAG,MAAMP,KAAK,CAACkB,IAAN,CAAW,KAAKT,GAAL,GAAU,QAArB,EAA+BmB,IAA/B,EAAqC;AAAElB,QAAAA,OAAO,EAAE;AAAE,qBAAWJ;AAAb;AAAX,OAArC,CAAlB;;AACA,UAAI,CAACC,GAAG,CAACI,IAAJ,CAASC,EAAd,EAAmB;AACf,cAAM,IAAIC,KAAJ,CAAUN,GAAG,CAACI,IAAJ,CAASG,GAAnB,CAAN;AACH;;AACD,aAAOP,GAAP;AACH,KAnDa;;AACV,SAAKE,GAAL,GAAW,uBAAX;AACH;;AAJY;;AA0DjB,OAAO,MAAMoB,UAAU,GAAG,IAAI3B,UAAJ,EAAnB","sourcesContent":["import axios from 'axios';\nimport Swal from 'sweetalert2';\n\n\nclass ApiService { \n\n    constructor() {\n        this.URL = 'http://localhost:4500'\n    }\n\n\n    getUsuarioById = async(id, token) => {\n        const res = await axios.get(this.URL + '/usuario/' + id, { headers: { 'x-token': token } })\n        if( !res.data.ok ) {\n            throw new Error(res.data.err)\n        }\n        return res;\n    }\n\n    login = async( Email, Password ) => {\n        const res = await axios.post(this.URL + '/usuario/login', {Email, Password})\n        if( !res.data.ok ) {\n            throw new Error(res.data.err)\n        }\n        return res;\n    }\n\n\n\n    craeteUser = async( Email, Password, UserName, PasswordRepeat ) => {\n        const res = await axios.post(this.URL+ '/usuario', {Email, Password, UserName, PasswordRepeat})\n        if( !res.data.ok ) {\n            throw new Error(res.data.err)\n        }\n        return res;\n    }\n\n\n    obtenerToDos = async( token ) => {\n        const res = await axios.get(this.URL+ '/todos', { headers: { 'x-token': token } } );\n        if( !res.data.ok ) {\n            throw new Error(res.data.err)\n        }\n        return res;\n    }\n\n    createTodo = async ( token, Name, Description, LimitDate, Criticality ) => {\n\n        const body = { \n            Name, Description, LimitDate, Criticality\n        }\n        \n        const res = await axios.post(this.URL+ '/todos', body, { headers: { 'x-token': token } } );\n        if( !res.data.ok ) {\n            throw new Error(res.data.err)\n        }\n        return res;\n    }\n\n}\n\n\nexport const apiService = new ApiService();"]},"metadata":{},"sourceType":"module"}